{"version":3,"sources":["components/Weather/index.js","components/Navbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","searchedData","setSearchedData","searchInput","setSearchInput","today","Date","date","getFullYear","getMonth","getDate","handleFormSubmit","event","a","preventDefault","https","require","url","get","res","data","on","chunk","weatherData","city","JSON","parse","name","the_temp","main","temp","humidity","wind_speed","wind","speed","icon","weather","Container","className","Form","onSubmit","inline","Control","value","onChange","e","target","type","placeholder","Button","variant","alt","src","width","height","CardColumns","Card","Body","Title","Text","AppNavbar","Navbar","bg","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80cc5927.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Button, Form, CardColumns, Card } from \"react-bootstrap\";\n\nfunction Weather() {\n  const [searchedData, setSearchedData] = useState(\"\");\n\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  let today = new Date();\n  let date =\n    today.getFullYear() + \"/\" + (today.getMonth() + 1) + \"/\" + today.getDate();\n\n  // create method to search for weather and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    const https = require(\"https\");\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchInput}&appid=a8e17bfcb12d79725964af1dd67c506a&units=metric`;\n    https.get(url, (res) => {\n      let data = \"\";\n      res.on(\"data\", (chunk) => {\n        data += chunk;\n      });\n      res.on(\"end\", () => {\n        data = JSON.parse(data);\n        // console.log(data);\n        const weatherData = {\n          city: data.name,\n          the_temp: data.main.temp,\n          humidity: data.main.humidity,\n          wind_speed: data.wind.speed,\n          icon: data.weather[0].icon,\n        };\n\n        setSearchedData(weatherData);\n        setSearchInput(\"\");\n      });\n    });\n  };\n\n  return (\n    <Container className=\"flex\">\n      <p className=\"current-day mt-4\">{date}</p>\n      <h2 className=\"mt-2\">\n        {searchedData\n          ? `Viewing ${searchedData.city} Weather:`\n          : \"Search for a city to begin\"}\n      </h2>\n      <Form\n        onSubmit={handleFormSubmit}\n        inline\n        className=\"justify-content-center mt-4\"\n      >\n        <Form.Control\n          className=\"search-city\"\n          name=\"searchInput\"\n          value={searchInput}\n          onChange={(e) => setSearchInput(e.target.value)}\n          type=\"text\"\n          placeholder=\"City Name\"\n        />\n\n        <Button type=\"submit\" className=\"search-btn\" variant=\"dark\">\n          Search\n        </Button>\n      </Form>\n\n      <div className=\"current-weather-box\">\n        <div className=\"mt-4\"></div>\n        {searchedData ? (\n          <div>\n            <h4>\n              {searchedData.city}{\" \"}\n              <img\n                alt=\"\"\n                src={`http://openweathermap.org/img/w/${searchedData.icon}.png`}\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n              />\n            </h4>\n            <CardColumns>\n              <Card>\n                <Card.Body>\n                  <Card.Title>Temperature:</Card.Title>\n                  <Card.Text>{searchedData.the_temp} Â°C</Card.Text>\n                  <Card.Text>\n                    <small className=\"text-muted\">\n                      {date} {searchedData.city}\n                    </small>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n              <Card>\n                <Card.Body>\n                  <Card.Title>Humidity:</Card.Title>\n                  <Card.Text>{searchedData.humidity} %</Card.Text>\n                  <Card.Text>\n                    <small className=\"text-muted\">\n                      {date} {searchedData.city}\n                    </small>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n              <Card>\n                <Card.Body>\n                  <Card.Title>Wind Speed:</Card.Title>\n                  <Card.Text>{searchedData.wind_speed} m/s</Card.Text>\n                  <Card.Text>\n                    <small className=\"text-muted\">\n                      {date} {searchedData.city}\n                    </small>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </CardColumns>\n          </div>\n        ) : null}\n      </div>\n    </Container>\n  );\n}\n\nexport default Weather;\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nconst AppNavbar = () => {\n  return (\n    <>\n      <Navbar\n        bg=\"dark\"\n        variant=\"dark\"\n        className=\"App-header justify-content-center\"\n      >\n        <h1 href=\"/\">Weather App</h1>\n      </Navbar>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./components/Weather\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}