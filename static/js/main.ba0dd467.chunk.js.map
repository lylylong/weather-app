{"version":3,"sources":["components/Weather/index.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","searchedData","setSearchedData","searchInput","setSearchInput","today","Date","date","getFullYear","getMonth","getDate","handleFormSubmit","event","a","preventDefault","https","require","url","get","res","data","on","chunk","weatherData","city","JSON","parse","name","the_temp","main","temp","humidity","pressure","onSubmit","className","value","onChange","e","target","type","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSA6FeA,MA3Ff,WAAoB,IAAD,EACuBC,mBAAS,IADhC,mBACVC,EADU,KACIC,EADJ,OAIqBF,mBAAS,IAJ9B,mBAIVG,EAJU,KAIGC,EAJH,KAMbC,EAAQ,IAAIC,KACZC,EACFF,EAAMG,cAAgB,KAAOH,EAAMI,WAAa,GAAK,IAAMJ,EAAMK,UAG7DC,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDACvBD,EAAME,iBAEDX,EAHkB,0CAId,GAJc,OAOjBY,EAAQC,EAAQ,IAClBC,EARmB,4DAQwCd,EARxC,wDASvBY,EAAMG,IAAID,GAAK,SAACE,GACd,IAAIC,EAAO,GACXD,EAAIE,GAAG,QAAQ,SAACC,GACdF,GAAQE,KAEVH,EAAIE,GAAG,OAAO,WAGZ,IAAME,EAAc,CAClBC,MAHFJ,EAAOK,KAAKC,MAAMN,IAGLO,KACXC,SAAUR,EAAKS,KAAKC,KACpBC,SAAUX,EAAKS,KAAKE,SACpBC,SAAUZ,EAAKS,KAAKG,UAGtB9B,EAAgBqB,GAChBnB,EAAe,UAzBI,2CAAH,sDA8BtB,OACE,gCACE,6BACGH,EAAY,kBACEA,EAAauB,KADf,aAET,+BAEN,uBAAMS,SAAUtB,EAAhB,UACE,uBACEuB,UAAU,cACVP,KAAK,cACLQ,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAOjC,EAAeiC,EAAEC,OAAOH,QACzCI,KAAK,OACLC,YAAY,cAGd,wBAAQD,KAAK,SAASL,UAAU,MAAhC,uBAKF,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,mBAAGA,UAAU,cAAb,SAA4B3B,MAE7BN,EACC,gCACE,6BAAKA,EAAauB,OAClB,gCACE,8CACA,qCAAUvB,EAAa2B,eAGzB,gCACE,2CACA,qCAAU3B,EAAa8B,eAGzB,gCACE,2CACA,qCAAU9B,EAAa+B,kBAGzB,YC3EGS,MATf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,yBACA,cAAC,EAAD,QCKSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ba0dd467.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Weather() {\n  const [searchedData, setSearchedData] = useState(\"\");\n\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  let today = new Date();\n  let date =\n    today.getFullYear() + \"/\" + (today.getMonth() + 1) + \"/\" + today.getDate();\n\n  // create method to search for weather and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    const https = require(\"https\");\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchInput}&appid=a8e17bfcb12d79725964af1dd67c506a&units=metric`;\n    https.get(url, (res) => {\n      let data = \"\";\n      res.on(\"data\", (chunk) => {\n        data += chunk;\n      });\n      res.on(\"end\", () => {\n        data = JSON.parse(data);\n        // console.log(data);\n        const weatherData = {\n          city: data.name,\n          the_temp: data.main.temp,\n          humidity: data.main.humidity,\n          pressure: data.main.pressure,\n        };\n\n        setSearchedData(weatherData);\n        setSearchInput(\"\");\n      });\n    });\n  };\n\n  return (\n    <div>\n      <h2>\n        {searchedData\n          ? `Viewing ${searchedData.city} Weather:`\n          : \"Search for a city to begin\"}\n      </h2>\n      <form onSubmit={handleFormSubmit}>\n        <input\n          className=\"search-city\"\n          name=\"searchInput\"\n          value={searchInput}\n          onChange={(e) => setSearchInput(e.target.value)}\n          type=\"text\"\n          placeholder=\"City Name\"\n        />\n\n        <button type=\"submit\" className=\"btn\">\n          Search\n        </button>\n      </form>\n\n      <div className=\"current-weather-box\">\n        <div className=\"card-header\">\n          <p className=\"current-day\">{date}</p>\n        </div>\n        {searchedData ? (\n          <div>\n            <h3>{searchedData.city}</h3>\n            <div>\n              <h5>Temperature:</h5>\n              <p>&nbsp;{searchedData.the_temp}</p>\n            </div>\n\n            <div>\n              <h5>Humidity:</h5>\n              <p>&nbsp;{searchedData.humidity}</p>\n            </div>\n\n            <div>\n              <h5>Pressure:</h5>\n              <p>&nbsp;{searchedData.pressure}</p>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default Weather;\n","import \"./App.css\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Weather App</header>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}